{"ast":null,"code":"var _jsxFileName = \"/Users/trananhtuan/Documents/datsan247/Frontend/src/pages/Booking.jsx\",\n  _s = $RefreshSig$();\n// src/pages/BookingSchedule.jsx\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport DatePicker from \"../components/datepicker\";\nimport Legend from \"../components/legend\";\nimport BookingTable from \"../components/bookingTable\";\nimport socket from \"../socket\";\nimport { getCourtsByCenter } from \"../apis/courts\";\nimport { getBookingStatusByCourt } from \"../apis/courtStatus\";\nimport { getPendingMapping, confirmBookingToDB, clearAllPendingBookings } from \"../apis/booking\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst times = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];\nconst slotCount = times.length - 1;\nconst BookingSchedule = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    search\n  } = useLocation();\n  const query = new URLSearchParams(search);\n\n  // Lấy thông tin từ URL\n  const userIdFromQuery = query.get(\"user\") || \"000000000000000000000001\";\n  const centerIdFromQuery = query.get(\"centerId\") || \"67ca6e3cfc964efa218ab7d7\";\n  const dateFromQuery = query.get(\"date\") || new Date().toISOString().split(\"T\")[0];\n  const currentUserId = userIdFromQuery;\n  const centerId = centerIdFromQuery;\n  const [selectedDate, setSelectedDate] = useState(dateFromQuery);\n\n  // Các state để lưu dữ liệu mapping\n  const [courts, setCourts] = useState([]);\n  const [bookedMapping, setBookedMapping] = useState({});\n  const [pendingMapping, setPendingMapping] = useState({});\n  const [mergedMapping, setMergedMapping] = useState({});\n\n  // Ref để lưu giá trị ngày trước đó (nếu cần)\n  const prevDateRef = useRef(selectedDate);\n\n  // --- CLEAR TOÀN BỘ CACHE PENDING (không phân theo ngày) ---  \n  // Khi trang load (F5), gọi API clearAllPendingBookings để xóa toàn bộ cache pending của user tại trung tâm.\n  useEffect(() => {\n    const clearAll = async () => {\n      try {\n        await clearAllPendingBookings({\n          userId: currentUserId,\n          centerId\n        });\n        console.log(\"Cleared all pending bookings on load\");\n      } catch (error) {\n        console.error(\"Error clearing all pending bookings on load:\", error);\n      }\n    };\n    clearAll();\n  }, [currentUserId, centerId]);\n\n  // Khi người dùng chuyển ngày qua DatePicker, cập nhật selectedDate và xóa toàn bộ cache pending.\n  const handleDateChange = async newDate => {\n    console.log(\"DatePicker selected date:\", newDate);\n    setSelectedDate(newDate);\n    try {\n      await clearAllPendingBookings({\n        userId: currentUserId,\n        centerId\n      });\n      console.log(\"Cleared all pending bookings on date change\");\n    } catch (error) {\n      console.error(\"Error clearing pending bookings on date change:\", error);\n    }\n  };\n\n  // Khi component unmount (ví dụ nhấn back), xóa toàn bộ cache pending.\n  useEffect(() => {\n    return () => {\n      clearAllPendingBookings({\n        userId: currentUserId,\n        centerId\n      }).then(() => console.log(\"Cleared all pending bookings on unmount\")).catch(err => console.error(\"Error clearing pending bookings on unmount:\", err));\n    };\n  }, [currentUserId, centerId]);\n\n  // --- FETCH DANH SÁCH SÂN ---\n  useEffect(() => {\n    const fetchCourts = async () => {\n      try {\n        const data = await getCourtsByCenter(centerId);\n        console.log(\"Fetched courts:\", data);\n        setCourts(Array.isArray(data) ? data : data.data);\n      } catch (error) {\n        console.error(\"Error fetching courts:\", error);\n      }\n    };\n    fetchCourts();\n  }, [centerId]);\n\n  // --- FETCH MAPPING ---\n  // Hàm reFetchMapping: lấy lại bookedMapping và pendingMapping cho ngày được chọn.\n  const reFetchMapping = useCallback(async () => {\n    if (courts.length > 0) {\n      // Lấy booked mapping\n      const booked = {};\n      for (const court of courts) {\n        try {\n          const statusArray = await getBookingStatusByCourt(centerId, selectedDate, court._id);\n          booked[court._id] = statusArray;\n        } catch (error) {\n          console.error(\"Error fetching booking status for court:\", court._id, error);\n          booked[court._id] = Array(slotCount).fill(\"trống\");\n        }\n      }\n      // Lấy pending mapping\n      const pending = await getPendingMapping(centerId, selectedDate);\n      console.log(\"Re-fetched booked mapping:\", booked);\n      console.log(\"Re-fetched pending mapping:\", pending);\n      setBookedMapping(booked);\n      setPendingMapping(pending);\n    }\n  }, [centerId, courts, selectedDate]);\n\n  // Khi selectedDate thay đổi, clear các mapping state để giao diện hiển thị trống, sau đó re-fetch dữ liệu.\n  useEffect(() => {\n    setBookedMapping({});\n    setPendingMapping({});\n    setMergedMapping({});\n    prevDateRef.current = selectedDate;\n    reFetchMapping();\n  }, [selectedDate, reFetchMapping]);\n\n  // Fetch booked mapping cho ngày được chọn\n  useEffect(() => {\n    const fetchBookedMapping = async () => {\n      if (courts.length > 0) {\n        const mapping = {};\n        for (const court of courts) {\n          try {\n            const statusArray = await getBookingStatusByCourt(centerId, selectedDate, court._id);\n            mapping[court._id] = statusArray;\n          } catch (error) {\n            console.error(\"Error fetching booking status for court:\", court._id, error);\n            mapping[court._id] = Array(slotCount).fill(\"trống\");\n          }\n        }\n        console.log(\"Booked mapping from API:\", mapping);\n        setBookedMapping(mapping);\n      }\n    };\n    fetchBookedMapping();\n  }, [courts, centerId, selectedDate]);\n\n  // Fetch pending mapping cho ngày được chọn\n  useEffect(() => {\n    const fetchPendingMapping = async () => {\n      try {\n        const mapping = await getPendingMapping(centerId, selectedDate);\n        console.log(\"Fetched pending mapping from API:\", mapping);\n        setPendingMapping(mapping);\n      } catch (error) {\n        console.error(\"Error fetching pending mapping:\", error);\n      }\n    };\n    fetchPendingMapping();\n  }, [centerId, selectedDate]);\n\n  // --- POLLING: reFetchMapping mỗi 10 giây ---\n  useEffect(() => {\n    const interval = setInterval(() => {\n      reFetchMapping();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [reFetchMapping]);\n\n  // --- SOCKET.IO: Lắng nghe sự kiện realtime ---\n  useEffect(() => {\n    const handleUpdateBookings = data => {\n      console.log(\"Received updateBookings event:\", data);\n      if (data.date === selectedDate) {\n        setPendingMapping(data.mapping);\n        reFetchMapping();\n      }\n    };\n    socket.on(\"updateBookings\", handleUpdateBookings);\n    socket.on(\"bookingUpdated\", () => {\n      reFetchMapping();\n    });\n    return () => {\n      socket.off(\"updateBookings\", handleUpdateBookings);\n      socket.off(\"bookingUpdated\");\n    };\n  }, [selectedDate, reFetchMapping]);\n\n  // --- HỢP NHẤT MAPPING ---\n  useEffect(() => {\n    const merged = {};\n    courts.forEach(court => {\n      const courtId = court._id;\n      const booked = bookedMapping[courtId] || Array(slotCount).fill(\"trống\");\n      const pending = pendingMapping[courtId] || Array(slotCount).fill(\"trống\");\n      const mergedArray = [];\n      for (let i = 0; i < slotCount; i++) {\n        if (booked[i] === \"đã đặt\") {\n          mergedArray[i] = \"đã đặt\";\n        } else if (typeof pending[i] === \"object\" && pending[i] !== null) {\n          mergedArray[i] = pending[i].userId === currentUserId ? \"myPending\" : \"pending\";\n        } else if (typeof pending[i] === \"string\") {\n          mergedArray[i] = pending[i];\n        } else {\n          mergedArray[i] = \"trống\";\n        }\n      }\n      merged[courtId] = mergedArray;\n    });\n    console.log(\"Merged mapping:\", merged);\n    setMergedMapping(merged);\n  }, [bookedMapping, pendingMapping, courts, currentUserId]);\n\n  // --- XỬ LÝ CLICK VÀO Ô ---\n  // Chỉ cho phép thao tác nếu ô có trạng thái \"trống\" hoặc \"myPending\"\n  const toggleBookingStatus = (rowIndex, colIndex) => {\n    const courtId = courts[rowIndex]._id;\n    console.log(`Toggling slot for court ${courtId} at colIndex ${colIndex} on date ${selectedDate}`);\n    socket.emit(\"toggleBooking\", {\n      centerId,\n      date: selectedDate,\n      courtId,\n      colIndex,\n      userId: currentUserId\n    });\n  };\n\n  // --- XÁC NHẬN BOOKING ---\n  // Khi nhấn \"Xác nhận\", pending booking chuyển sang DB và chuyển hướng sang PaymentPage\n  const handleConfirm = async () => {\n    try {\n      const {\n        success,\n        booking\n      } = await confirmBookingToDB({\n        userId: currentUserId,\n        centerId,\n        date: selectedDate\n      });\n      if (success) {\n        alert(`Booking pending đã được lưu vào DB (TTL 5 phút) cho ngày ${selectedDate}.\\nBooking ID: ${booking._id}`);\n        navigate(`/payment?user=${currentUserId}&centerId=${centerId}&date=${selectedDate}`);\n      }\n    } catch (error) {\n      alert(\"Lỗi khi xác nhận booking: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen w-screen bg-green-900 text-white p-4 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-xl font-bold\",\n      children: \"\\u0110\\u1EB7t l\\u1ECBch ng\\xE0y tr\\u1EF1c quan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-md font-bold text-black bg-gray-200 p-2 my-2\",\n      children: [\"B\\u1EA1n \\u0111ang \\u0111\\u0103ng nh\\u1EADp v\\u1EDBi user: \", currentUserId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white text-black mt-4 p-4 rounded-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          value: selectedDate,\n          onDateChange: handleDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 mt-2\",\n        children: \"L\\u01B0u \\xFD: N\\u1EBFu b\\u1EA1n c\\u1EA7n \\u0111\\u1EB7t l\\u1ECBch c\\u1ED1 \\u0111\\u1ECBnh, vui l\\xF2ng li\\xEAn h\\u1EC7: 0918.773.883 \\u0111\\u1EC3 \\u0111\\u01B0\\u1EE3c h\\u1ED7 tr\\u1EE3.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), courts.length > 0 ? /*#__PURE__*/_jsxDEV(BookingTable, {\n      courts: courts,\n      bookingData: mergedMapping,\n      toggleBookingStatus: toggleBookingStatus,\n      times: times,\n      slotCount: slotCount,\n      currentUserId: currentUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0110ang t\\u1EA3i d\\u1EEF li\\u1EC7u...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirm,\n        className: \"bg-blue-500 text-white font-bold px-6 py-2 rounded hover:bg-blue-600\",\n        children: \"X\\xE1c nh\\u1EADn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(BookingSchedule, \"tPEn413brIZrL2joxPTgHWI+oUE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = BookingSchedule;\nexport default BookingSchedule;\nvar _c;\n$RefreshReg$(_c, \"BookingSchedule\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useNavigate","useLocation","DatePicker","Legend","BookingTable","socket","getCourtsByCenter","getBookingStatusByCourt","getPendingMapping","confirmBookingToDB","clearAllPendingBookings","jsxDEV","_jsxDEV","times","slotCount","length","BookingSchedule","_s","navigate","search","query","URLSearchParams","userIdFromQuery","get","centerIdFromQuery","dateFromQuery","Date","toISOString","split","currentUserId","centerId","selectedDate","setSelectedDate","courts","setCourts","bookedMapping","setBookedMapping","pendingMapping","setPendingMapping","mergedMapping","setMergedMapping","prevDateRef","clearAll","userId","console","log","error","handleDateChange","newDate","then","catch","err","fetchCourts","data","Array","isArray","reFetchMapping","booked","court","statusArray","_id","fill","pending","current","fetchBookedMapping","mapping","fetchPendingMapping","interval","setInterval","clearInterval","handleUpdateBookings","date","on","off","merged","forEach","courtId","mergedArray","i","toggleBookingStatus","rowIndex","colIndex","emit","handleConfirm","success","booking","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onDateChange","bookingData","onClick","_c","$RefreshReg$"],"sources":["/Users/trananhtuan/Documents/datsan247/Frontend/src/pages/Booking.jsx"],"sourcesContent":["// src/pages/BookingSchedule.jsx\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport DatePicker from \"../components/datepicker\";\nimport Legend from \"../components/legend\";\nimport BookingTable from \"../components/bookingTable\";\nimport socket from \"../socket\";\nimport { getCourtsByCenter } from \"../apis/courts\";\nimport { getBookingStatusByCourt } from \"../apis/courtStatus\";\nimport {\n  getPendingMapping,\n  confirmBookingToDB,\n  clearAllPendingBookings\n} from \"../apis/booking\";\n\nconst times = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];\nconst slotCount = times.length - 1;\n\nconst BookingSchedule = () => {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const query = new URLSearchParams(search);\n\n  // Lấy thông tin từ URL\n  const userIdFromQuery = query.get(\"user\") || \"000000000000000000000001\";\n  const centerIdFromQuery = query.get(\"centerId\") || \"67ca6e3cfc964efa218ab7d7\";\n  const dateFromQuery = query.get(\"date\") || new Date().toISOString().split(\"T\")[0];\n\n  const currentUserId = userIdFromQuery;\n  const centerId = centerIdFromQuery;\n  const [selectedDate, setSelectedDate] = useState(dateFromQuery);\n\n  // Các state để lưu dữ liệu mapping\n  const [courts, setCourts] = useState([]);\n  const [bookedMapping, setBookedMapping] = useState({});\n  const [pendingMapping, setPendingMapping] = useState({});\n  const [mergedMapping, setMergedMapping] = useState({});\n\n  // Ref để lưu giá trị ngày trước đó (nếu cần)\n  const prevDateRef = useRef(selectedDate);\n\n  // --- CLEAR TOÀN BỘ CACHE PENDING (không phân theo ngày) ---  \n  // Khi trang load (F5), gọi API clearAllPendingBookings để xóa toàn bộ cache pending của user tại trung tâm.\n  useEffect(() => {\n    const clearAll = async () => {\n      try {\n        await clearAllPendingBookings({ userId: currentUserId, centerId });\n        console.log(\"Cleared all pending bookings on load\");\n      } catch (error) {\n        console.error(\"Error clearing all pending bookings on load:\", error);\n      }\n    };\n    clearAll();\n  }, [currentUserId, centerId]);\n\n  // Khi người dùng chuyển ngày qua DatePicker, cập nhật selectedDate và xóa toàn bộ cache pending.\n  const handleDateChange = async (newDate) => {\n    console.log(\"DatePicker selected date:\", newDate);\n    setSelectedDate(newDate);\n    try {\n      await clearAllPendingBookings({ userId: currentUserId, centerId });\n      console.log(\"Cleared all pending bookings on date change\");\n    } catch (error) {\n      console.error(\"Error clearing pending bookings on date change:\", error);\n    }\n  };\n\n  // Khi component unmount (ví dụ nhấn back), xóa toàn bộ cache pending.\n  useEffect(() => {\n    return () => {\n      clearAllPendingBookings({ userId: currentUserId, centerId })\n        .then(() => console.log(\"Cleared all pending bookings on unmount\"))\n        .catch((err) => console.error(\"Error clearing pending bookings on unmount:\", err));\n    };\n  }, [currentUserId, centerId]);\n\n  // --- FETCH DANH SÁCH SÂN ---\n  useEffect(() => {\n    const fetchCourts = async () => {\n      try {\n        const data = await getCourtsByCenter(centerId);\n        console.log(\"Fetched courts:\", data);\n        setCourts(Array.isArray(data) ? data : data.data);\n      } catch (error) {\n        console.error(\"Error fetching courts:\", error);\n      }\n    };\n    fetchCourts();\n  }, [centerId]);\n\n  // --- FETCH MAPPING ---\n  // Hàm reFetchMapping: lấy lại bookedMapping và pendingMapping cho ngày được chọn.\n  const reFetchMapping = useCallback(async () => {\n    if (courts.length > 0) {\n      // Lấy booked mapping\n      const booked = {};\n      for (const court of courts) {\n        try {\n          const statusArray = await getBookingStatusByCourt(centerId, selectedDate, court._id);\n          booked[court._id] = statusArray;\n        } catch (error) {\n          console.error(\"Error fetching booking status for court:\", court._id, error);\n          booked[court._id] = Array(slotCount).fill(\"trống\");\n        }\n      }\n      // Lấy pending mapping\n      const pending = await getPendingMapping(centerId, selectedDate);\n      console.log(\"Re-fetched booked mapping:\", booked);\n      console.log(\"Re-fetched pending mapping:\", pending);\n      setBookedMapping(booked);\n      setPendingMapping(pending);\n    }\n  }, [centerId, courts, selectedDate]);\n\n  // Khi selectedDate thay đổi, clear các mapping state để giao diện hiển thị trống, sau đó re-fetch dữ liệu.\n  useEffect(() => {\n    setBookedMapping({});\n    setPendingMapping({});\n    setMergedMapping({});\n    prevDateRef.current = selectedDate;\n    reFetchMapping();\n  }, [selectedDate, reFetchMapping]);\n\n  // Fetch booked mapping cho ngày được chọn\n  useEffect(() => {\n    const fetchBookedMapping = async () => {\n      if (courts.length > 0) {\n        const mapping = {};\n        for (const court of courts) {\n          try {\n            const statusArray = await getBookingStatusByCourt(centerId, selectedDate, court._id);\n            mapping[court._id] = statusArray;\n          } catch (error) {\n            console.error(\"Error fetching booking status for court:\", court._id, error);\n            mapping[court._id] = Array(slotCount).fill(\"trống\");\n          }\n        }\n        console.log(\"Booked mapping from API:\", mapping);\n        setBookedMapping(mapping);\n      }\n    };\n    fetchBookedMapping();\n  }, [courts, centerId, selectedDate]);\n\n  // Fetch pending mapping cho ngày được chọn\n  useEffect(() => {\n    const fetchPendingMapping = async () => {\n      try {\n        const mapping = await getPendingMapping(centerId, selectedDate);\n        console.log(\"Fetched pending mapping from API:\", mapping);\n        setPendingMapping(mapping);\n      } catch (error) {\n        console.error(\"Error fetching pending mapping:\", error);\n      }\n    };\n    fetchPendingMapping();\n  }, [centerId, selectedDate]);\n\n  // --- POLLING: reFetchMapping mỗi 10 giây ---\n  useEffect(() => {\n    const interval = setInterval(() => {\n      reFetchMapping();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [reFetchMapping]);\n\n  // --- SOCKET.IO: Lắng nghe sự kiện realtime ---\n  useEffect(() => {\n    const handleUpdateBookings = (data) => {\n      console.log(\"Received updateBookings event:\", data);\n      if (data.date === selectedDate) {\n        setPendingMapping(data.mapping);\n        reFetchMapping();\n      }\n    };\n\n    socket.on(\"updateBookings\", handleUpdateBookings);\n    socket.on(\"bookingUpdated\", () => {\n      reFetchMapping();\n    });\n    return () => {\n      socket.off(\"updateBookings\", handleUpdateBookings);\n      socket.off(\"bookingUpdated\");\n    };\n  }, [selectedDate, reFetchMapping]);\n\n  // --- HỢP NHẤT MAPPING ---\n  useEffect(() => {\n    const merged = {};\n    courts.forEach((court) => {\n      const courtId = court._id;\n      const booked = bookedMapping[courtId] || Array(slotCount).fill(\"trống\");\n      const pending = pendingMapping[courtId] || Array(slotCount).fill(\"trống\");\n      const mergedArray = [];\n      for (let i = 0; i < slotCount; i++) {\n        if (booked[i] === \"đã đặt\") {\n          mergedArray[i] = \"đã đặt\";\n        } else if (typeof pending[i] === \"object\" && pending[i] !== null) {\n          mergedArray[i] = pending[i].userId === currentUserId ? \"myPending\" : \"pending\";\n        } else if (typeof pending[i] === \"string\") {\n          mergedArray[i] = pending[i];\n        } else {\n          mergedArray[i] = \"trống\";\n        }\n      }\n      merged[courtId] = mergedArray;\n    });\n    console.log(\"Merged mapping:\", merged);\n    setMergedMapping(merged);\n  }, [bookedMapping, pendingMapping, courts, currentUserId]);\n\n  // --- XỬ LÝ CLICK VÀO Ô ---\n  // Chỉ cho phép thao tác nếu ô có trạng thái \"trống\" hoặc \"myPending\"\n  const toggleBookingStatus = (rowIndex, colIndex) => {\n    const courtId = courts[rowIndex]._id;\n    console.log(`Toggling slot for court ${courtId} at colIndex ${colIndex} on date ${selectedDate}`);\n    socket.emit(\"toggleBooking\", { centerId, date: selectedDate, courtId, colIndex, userId: currentUserId });\n  };\n\n  // --- XÁC NHẬN BOOKING ---\n  // Khi nhấn \"Xác nhận\", pending booking chuyển sang DB và chuyển hướng sang PaymentPage\n  const handleConfirm = async () => {\n    try {\n      const { success, booking } = await confirmBookingToDB({\n        userId: currentUserId,\n        centerId,\n        date: selectedDate\n      });\n      if (success) {\n        alert(`Booking pending đã được lưu vào DB (TTL 5 phút) cho ngày ${selectedDate}.\\nBooking ID: ${booking._id}`);\n        navigate(`/payment?user=${currentUserId}&centerId=${centerId}&date=${selectedDate}`);\n      }\n    } catch (error) {\n      alert(\"Lỗi khi xác nhận booking: \" + error.message);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen w-screen bg-green-900 text-white p-4 relative\">\n      <div className=\"text-center text-xl font-bold\">Đặt lịch ngày trực quan</div>\n      <div className=\"text-center text-md font-bold text-black bg-gray-200 p-2 my-2\">\n        Bạn đang đăng nhập với user: {currentUserId}\n      </div>\n      <div className=\"bg-white text-black mt-4 p-4 rounded-md\">\n        <div className=\"flex justify-between items-center\">\n          <Legend />\n          <DatePicker value={selectedDate} onDateChange={handleDateChange} />\n        </div>\n        <p className=\"text-red-500 mt-2\">\n          Lưu ý: Nếu bạn cần đặt lịch cố định, vui lòng liên hệ: 0918.773.883 để được hỗ trợ.\n        </p>\n      </div>\n      {courts.length > 0 ? (\n        <BookingTable \n          courts={courts}\n          bookingData={mergedMapping}\n          toggleBookingStatus={toggleBookingStatus}\n          times={times}\n          slotCount={slotCount}\n          currentUserId={currentUserId}\n        />\n      ) : (\n        <div>Đang tải dữ liệu...</div>\n      )}\n      <div className=\"text-center mt-4\">\n        <button\n          onClick={handleConfirm}\n          className=\"bg-blue-500 text-white font-bold px-6 py-2 rounded hover:bg-blue-600\"\n        >\n          Xác nhận\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default BookingSchedule;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
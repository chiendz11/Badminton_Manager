const mongoose = require('mongoose');
const Rating = require("../models/ratings");
const Center = require("../models/centers");

const updateAvgRating = async (centerId) => {
  try {
    // T·∫°o ObjectId h·ª£p l·ªá t·ª´ centerId b·∫±ng c√°ch s·ª≠ d·ª•ng 'new'
    const objectId = new mongoose.Types.ObjectId(centerId);

    // T√≠nh to√°n ƒëi·ªÉm trung b√¨nh t·ª´ t·∫•t c·∫£ c√°c ƒë√°nh gi√° c·ªßa center
    const ratings = await Rating.aggregate([
      { $match: { center: objectId } }, // S·ª≠ d·ª•ng objectId thay v√¨ centerId th√¥
      { $group: { _id: "$center", avgRating: { $avg: "$stars" } } } // T√≠nh trung b√¨nh stars
    ]);

    console.log("üîç K·∫øt qu·∫£ t·ª´ aggregate:", ratings); // In ra k·∫øt qu·∫£ t·ª´ aggregate

    const newAvg = ratings.length > 0 ? ratings[0].avgRating : 0; // N·∫øu c√≥ ƒë√°nh gi√° th√¨ l·∫•y trung b√¨nh, n·∫øu kh√¥ng th√¨ g√°n 0
    console.log("üîç newAvg:", newAvg); // In ra gi√° tr·ªã c·ªßa newAvg

    // C·∫≠p nh·∫≠t avgRating v√†o Center
    await Center.findByIdAndUpdate(centerId, { avgRating: newAvg });
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t avgRating cho Center ${centerId}: ${newAvg}`);
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t avgRating:", error);
  }
};

module.exports = updateAvgRating;